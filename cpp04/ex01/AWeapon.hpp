/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   AWeapon.hpp                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jelarose <jelarose@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2020/12/03 09:11:56 by jelarose          #+#    #+#             */
/*   Updated: 2020/12/03 09:11:58 by jelarose         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef AWEAPON_HPP
#define AWEAPON_HPP

#include <string>
#include <iostream>
#include <ostream>

class AWeapon
{
    
public:

////////////////////////////////////////////////////
//              CONSTRUCTEUR    
////////////////////////////////////////////////////

    AWeapon(std::string const & name, int apcost, int damage);

////////////////////////////////////////////////////
//              CONSTRUCTEUR DE COPIE
////////////////////////////////////////////////////

    AWeapon(AWeapon const &weapon);

////////////////////////////////////////////////////
//              DESTRUCTEUR    
////////////////////////////////////////////////////

    virtual ~AWeapon();

////////////////////////////////////////////////////
//              ACCESSEURS   
////////////////////////////////////////////////////

std::string const   getName() const;
int                 getAPCost() const;
int                 getDamage() const;

////////////////////////////////////////////////////
//              OPERATEUR D'ASSIGNATION
////////////////////////////////////////////////////

    AWeapon &operator=(const AWeapon &weapon);

////////////////////////////////////////////////////
//              METHODES
////////////////////////////////////////////////////

    virtual void attack() const = 0;

private:

////////////////////////////////////////////////////
//              ATTRIBUTS
////////////////////////////////////////////////////

    AWeapon();
    std::string m_name;
    int         m_apcost;
    int         m_damage;

};

////////////////////////////////////////////////////
//              OPERATEUR DE FLUX
////////////////////////////////////////////////////

#endif
