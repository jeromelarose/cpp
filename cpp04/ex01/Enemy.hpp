/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   Enemy.hpp                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jelarose <jelarose@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2020/12/03 09:12:45 by jelarose          #+#    #+#             */
/*   Updated: 2020/12/03 09:12:46 by jelarose         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef ENEMY_HPP
#define ENEMY_HPP

#include <string>
#include <iostream>
#include <ostream>

class Enemy
{
    
public:

////////////////////////////////////////////////////
//              CONSTRUCTEUR    
////////////////////////////////////////////////////

    Enemy(int hp, std::string const &type);

////////////////////////////////////////////////////
//              CONSTRUCTEUR DE COPIE
////////////////////////////////////////////////////

    Enemy(Enemy const &enemy);

////////////////////////////////////////////////////
//              DESTRUCTEUR    
////////////////////////////////////////////////////

    virtual ~Enemy();

////////////////////////////////////////////////////
//              ACCESSEURS   
////////////////////////////////////////////////////

    std::string const   getType() const;
    int                 getHP() const;
    void                setHP(int i);

////////////////////////////////////////////////////
//              OPERATEUR D'ASSIGNATION
////////////////////////////////////////////////////

    Enemy &operator=(const Enemy &enemy);

////////////////////////////////////////////////////
//              METHODES
////////////////////////////////////////////////////

    virtual void takeDamage(int);

private:

    Enemy();

////////////////////////////////////////////////////
//              ATTRIBUTS
////////////////////////////////////////////////////

    int         m_hp;
    std::string m_type;

};

////////////////////////////////////////////////////
//              OPERATEUR DE FLUX
////////////////////////////////////////////////////

#endif
